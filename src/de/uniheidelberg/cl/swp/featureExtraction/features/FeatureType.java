/* * ELAC: Ensemble Learning for Anaphora- and Coreference-Resolution-Systems * package: de.uniheidelberg.cl.swp.featureExtraction.features * class: FeatureType *  * Authors: E-Mail * Thomas Boegel: boegel@cl.uni-heidelberg.de * Lukas Funk: funk@cl.uni-heidelberg.de * Andreas Kull: kull@cl.uni-heidelberg.de *  * Please find a detailed explanation of this particular class/package and its role and usage at * the first JavaDoc following this comment. *  * Copyright 2010 Thomas Boegel & Lukas Funk & Andreas Kull * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package de.uniheidelberg.cl.swp.featureExtraction.features;/** * This enumeration represents the possible type of a feature. This information is used for  * comparison, i.e. an int value has to be compared completely different than a boolean value  * (as you need a min and a max value for numeric values). * */public enum FeatureType {		/**	 * Boolean FeatureType (true vs. false)	 */	BOOLEAN,		/**	 * Numeric {@link FeatureType} (usually used for distances).	 */	NUMERIC,		/**	 * String {@link FeatureType} (could be used for token representation).	 */	STRING,		/**	 * POSTag {@link FeatureType} (contains one of the	 * {@link de.uniheidelberg.cl.swp.featureExtraction.features.POSTag}s).	 */	POSTAG,		/**	 *  NEType {@link FeatureType} (contains one of the	 *  {@link de.uniheidelberg.cl.swp.featureExtraction.features.NEType}s).	 */	NETYPE;}