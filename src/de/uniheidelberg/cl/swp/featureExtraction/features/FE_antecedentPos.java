/* * ELAC: Ensemble Learning for Anaphora- and Coreference-Resolution-Systems * package: de.uniheidelberg.cl.swp.featureExtraction.features * class: FE_antecedentPos *  * Authors: E-Mail * Thomas Boegel: boegel@cl.uni-heidelberg.de * Lukas Funk: funk@cl.uni-heidelberg.de * Andreas Kull: kull@cl.uni-heidelberg.de *  * Please find a detailed explanation of this particular class/package and its role and usage at * the first JavaDoc following this comment. *  * Copyright 2010 Thomas Boegel & Lukas Funk & Andreas Kull * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package de.uniheidelberg.cl.swp.featureExtraction.features;import java.util.ArrayList;import java.util.List;import org.eml.MMAX2.annotation.markables.MarkableLevel;import weka.core.Attribute;import de.uniheidelberg.cl.swp.datastructure.CoreferencePair;import de.uniheidelberg.cl.swp.datastructure.Feature;import de.uniheidelberg.cl.swp.featureExtraction.AbstractFeatureExtractor;import de.uniheidelberg.cl.swp.util.MMAXParser;/** * This feature extractor extracts the feature "Part of Speech tag antecedent". * */public class FE_antecedentPos extends AbstractFeatureExtractor {		/**	 * Initializes the Feature Extractor and sets its name. 	 */	public FE_antecedentPos() { this.name = "antecedentPos"; }		@Override	public void extractFeatures(CoreferencePair corefPair, MMAXParser mmax) {		/* Only use the POS tag of the first word, should be enough. But keep in mind that we can 		 * not handle references to sentences correctly by that! */		String id = corefPair.getAntecedent().getWordList().get(0).getXmlId();		MarkableLevel mmaxL = mmax.getDiscourse().getMarkableLevelByName("pos", false);		String pos = mmaxL.getAllMarkablesAtDiscourseElement(id, true)[0].getAttributeValue("tag");				Feature<POSTag> feature = new Feature<POSTag>(this.name);		feature.setValue(POSTag.getMatchingPosType(pos.toLowerCase()));		feature.setFtype(FeatureType.POSTAG);						addFeatureToCoref(feature, corefPair);	}	@Override	public Attribute getWekaAttribute() {		List<String> posVector = new ArrayList<String>();		for(POSTag tag : POSTag.values()) {			posVector.add(tag.toString());		}		return new Attribute(this.name, posVector);	}}